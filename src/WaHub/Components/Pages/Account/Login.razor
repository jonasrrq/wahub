@page "/Account/login"
@* @rendermode InteractiveServer *@
@* @attribute [StreamRendering] *@

@using System.ComponentModel.DataAnnotations

@inject LocalizationService Localization
@inject SignInManager<ApplicationUser> singInManager
@inject UserManager<ApplicationUser> userManager
@inject NavigationService navigation
@inject IHttpContextAccessor httpContextAccessor

<PageTitle>@Localization.Login - WaHub</PageTitle>

<div class="login-container">
    <div class="login-form">
        <h1>@Localization.Login</h1>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="error-message">
                @errorMessage
            </div>
        }

        <EditForm Model="inputModel" OnValidSubmit="HandleLogin" FormName="Login">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="email">Email</label>
                <InputText id="email" @bind-Value="inputModel.Email" placeholder="admin@wahub.com" />
                <ValidationMessage For="@(() => inputModel.Email)" />
            </div>

            <div class="form-group">
                <label for="password">Password</label>
                <InputText type="password" id="password" @bind-Value="inputModel.Password" placeholder="admin123" />
                <ValidationMessage For="@(() => inputModel.Password)" />
            </div>
            <button type="submit" class="login-button" disabled="@isLoading">
                @if (isLoading)
                {
                    <div class="login-loading">
                        <div class="login-spinner"></div>
                        <span>Iniciando sesión...</span>
                    </div>
                }
                else
                {
                    <span>@Localization.Login</span>
                }
            </button>
        </EditForm>

        <p>¿No tienes cuenta? <a href="/Account/register">Regístrate aquí</a></p>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private LoginModel inputModel { get; set; } = new(); private bool isLoading = false;
    private string errorMessage = "";

    public class LoginModel
    {
        [Required(ErrorMessage = "El email es requerido")]
        [EmailAddress(ErrorMessage = "Ingrese un email válido")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "La contraseña es requerida")]
        [MinLength(6, ErrorMessage = "La contraseña debe tener al menos 6 caracteres")]
        public string Password { get; set; } = "";
    }

    private async Task HandleLogin()
    {
        if (string.IsNullOrWhiteSpace(inputModel.Email) || string.IsNullOrWhiteSpace(inputModel.Password))
        {
            errorMessage = "Por favor, ingresa tu email y contraseña.";
            return;
        }

        isLoading = true;
        errorMessage = "";

        try
        {
            var findUser = await userManager.FindByEmailAsync(inputModel.Email);
            if (findUser == null)
            {
                errorMessage = "Credenciales incorrectas. Usa las credenciales de prueba mostradas arriba.";
                return;
            }
            var result = await singInManager.PasswordSignInAsync(findUser, inputModel.Password, false, false);

            if (!result.Succeeded)
            {
                errorMessage = "Credenciales incorrectas. Usa las credenciales de prueba mostradas arriba.";
                return;
            }            // Usar redirección HTTP en lugar de navegación del cliente
            var httpContext = httpContextAccessor.HttpContext;
            if (httpContext != null)
            {
                httpContext.Response.Redirect("/dashboard");
                return;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error durante el login: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}
