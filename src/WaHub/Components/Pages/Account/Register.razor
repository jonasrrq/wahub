@page "/account/register"
@rendermode InteractiveServer

@inject SignInManager<ApplicationUser> singInManager
@inject UserManager<ApplicationUser> userManager
@inject NavigationService Navigation
@inject ILocalizationService Localization

<PageTitle>@Localization.GetString(ResourceKeys.Register_Title) - WaHub</PageTitle>

<div class="register-container">
    <div class="register-content">
        <div class="register-form-container">
            <div class="register-form">
                <div class="form-header">
                    <h1>@Localization.GetString(ResourceKeys.Register_CreateAccount)</h1>
                    <p>@Localization.GetString(ResourceKeys.Register_Intro)</p>
                </div>

                <form @onsubmit="HandleSubmit" @onsubmit:preventDefault="true">
                    <div class="form-row">
                        <div class="form-group">
                            <label for="firstName">@Localization.GetString(ResourceKeys.Register_FirstName)</label>
                            <input type="text" id="firstName" @bind="registerModel.FirstName" required />
                        </div>

                        <div class="form-group">
                            <label for="lastName">@Localization.GetString(ResourceKeys.Register_LastName)</label>
                            <input type="text" id="lastName" @bind="registerModel.LastName" required />
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="email">@Localization.GetString(ResourceKeys.Register_Email)</label>
                        <input type="email" id="email" @bind="registerModel.Email" required />
                    </div>

                    <div class="form-group">
                        <label for="company">@Localization.GetString(ResourceKeys.Register_Company)</label>
                        <input type="text" id="company" @bind="registerModel.Company" />
                    </div>

                    <div class="form-group">
                        <label for="password">@Localization.GetString(ResourceKeys.Register_Password)</label>
                        <input type="password" id="password" @bind="registerModel.Password" required />
                    </div>

                    <div class="form-group">
                        <label for="confirmPassword">@Localization.GetString(ResourceKeys.Register_ConfirmPassword)</label>
                        <input type="password" id="confirmPassword" @bind="registerModel.ConfirmPassword" required />
                    </div>

                    <div class="form-group checkbox-group">
                        <label class="checkbox-label">
                            <input type="checkbox" @bind="acceptTerms" required />
                            <span class="checkmark"></span>
                            @Localization.GetString(ResourceKeys.Register_AcceptTermsPart1) <a href="/terms" target="_blank">@Localization.GetString(ResourceKeys.Register_TermsAndConditions)</a> @Localization.GetString(ResourceKeys.Register_AcceptTermsPart2) <a href="/privacy" target="_blank">@Localization.GetString(ResourceKeys.Register_PrivacyPolicy)</a>
                        </label>
                    </div>

                    <button type="submit" class="btn btn-primary btn-full" disabled="@(!acceptTerms || isLoading)">
                        @if (isLoading)
                        {
                            <span class="loading-spinner"></span>
                            <span>@Localization.GetString(ResourceKeys.Register_CreatingAccount)</span>
                        }
                        else
                        {
                            <span>@Localization.GetString(ResourceKeys.Register_CreateFreeAccount)</span>
                        }
                    </button>
                </form>

                <div class="form-footer">
                    <p>@Localization.GetString(ResourceKeys.Register_AlreadyHaveAccount) <a href="/Account/login" @onclick="@(() => Navigation.Push("/Account/login"))" @onclick:preventDefault="true">@Localization.GetString(ResourceKeys.Register_SignIn)</a></p>
                </div>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="error-message">
                        @errorMessage
                    </div>
                }
            </div>

            <div class="register-benefits">
                <h3>@Localization.GetString(ResourceKeys.Register_BenefitsTitle)</h3>
                <ul class="benefits-list">
                    <li>@Localization.GetString(ResourceKeys.Register_Benefit1)</li>
                    <li>@Localization.GetString(ResourceKeys.Register_Benefit2)</li>
                    <li>@Localization.GetString(ResourceKeys.Register_Benefit3)</li>
                    <li>@Localization.GetString(ResourceKeys.Register_Benefit4)</li>
                    <li>@Localization.GetString(ResourceKeys.Register_Benefit5)</li>
                    <li>@Localization.GetString(ResourceKeys.Register_Benefit6)</li>
                </ul>

                <div class="testimonial">
                    <blockquote>
                        @Localization.GetString(ResourceKeys.Register_TestimonialQuote)
                    </blockquote>
                    <cite>@Localization.GetString(ResourceKeys.Register_TestimonialCite)</cite>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterModel registerModel = new();
    private bool acceptTerms = false;
    private bool isLoading = false;
    private string errorMessage = "";

    public class RegisterModel
    {
        public string FirstName { get; set; } = "";
        public string LastName { get; set; } = "";
        public string Email { get; set; } = "";
        public string Company { get; set; } = "";
        public string Password { get; set; } = "";
        public string ConfirmPassword { get; set; } = "";
    }

    protected override void OnInitialized()
    {
        // Ensure Localization service is available before using it in validation
        if (Localization == null)
        {
            throw new InvalidOperationException($"{nameof(Localization)} is not injected. Check if @inject ILocalizationService Localization is present in the .razor file.");
        }
    }

    private async Task HandleSubmit()
    {
        errorMessage = "";
        var validationErrors = ValidateRegistration();

        if (validationErrors.Any())
        {
            errorMessage = string.Join("\n", validationErrors);
            return;
        }

        isLoading = true;

        try
        {
            var user = new ApplicationUser()
            {
                FirstName = registerModel.FirstName,
                LastName = registerModel.LastName,
                UserName = registerModel.Email,
                Email = registerModel.Email,
                PasswordHash = registerModel.Password,
                CompanyName = registerModel.Company,
                FullName = $"{registerModel.FirstName} {registerModel.LastName}"
            };

            var result = await singInManager.UserManager.CreateAsync(user, registerModel.Password);

            if (result.Succeeded)
            {
                Navigation.Push("/Account/login");
            }
            else
            {
                errorMessage = string.Join("\n", result.Errors.Select(x => x.Description));
            }
        }
        catch (Exception)
        {
            errorMessage = Localization.GetString(ResourceKeys.Register_ErrorCreatingAccount);
        }
        finally
        {
            isLoading = false;
        }
    }

    private List<string> ValidateRegistration()
    {
        var errors = new List<string>();

        // Validar campos requeridos
        if (string.IsNullOrWhiteSpace(registerModel.FirstName?.Trim()))
        {
            errors.Add(Localization.GetString(ResourceKeys.Register_Validation_FirstNameRequired));
        }

        if (string.IsNullOrWhiteSpace(registerModel.LastName?.Trim()))
        {
            errors.Add(Localization.GetString(ResourceKeys.Register_Validation_LastNameRequired));
        }

        // Validar email
        if (string.IsNullOrWhiteSpace(registerModel.Email?.Trim()))
        {
            errors.Add(Localization.GetString(ResourceKeys.Register_Validation_EmailRequired));
        }
        else if (!IsValidEmail(registerModel.Email))
        {
            errors.Add(Localization.GetString(ResourceKeys.Register_Validation_EmailInvalid));
        }

        // Validar contrase√±a
        var passwordErrors = ValidatePassword(registerModel.Password);
        errors.AddRange(passwordErrors);

        if (registerModel.Password != registerModel.ConfirmPassword)
        {
            errors.Add(Localization.GetString(ResourceKeys.Register_Validation_PasswordsDoNotMatch));
        }

        if (!acceptTerms)
        {
            errors.Add(Localization.GetString(ResourceKeys.Register_Validation_MustAcceptTerms));
        }

        return errors;
    }

    private List<string> ValidatePassword(string password)
    {
        var errors = new List<string>();

        if (string.IsNullOrWhiteSpace(password))
        {
            errors.Add(Localization.GetString(ResourceKeys.Register_Validation_PasswordRequired));
            return errors;
        }

        if (password.Length < 8)
        {
            errors.Add(Localization.GetString(ResourceKeys.Register_Validation_PasswordMinLength));
        }

        if (!password.Any(char.IsUpper))
        {
            errors.Add(Localization.GetString(ResourceKeys.Register_Validation_PasswordUppercase));
        }

        if (!password.Any(char.IsLower))
        {
            errors.Add(Localization.GetString(ResourceKeys.Register_Validation_PasswordLowercase));
        }

        if (!password.Any(char.IsDigit))
        {
            errors.Add(Localization.GetString(ResourceKeys.Register_Validation_PasswordDigit));
        }

        return errors;
    }

    private bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }
}
