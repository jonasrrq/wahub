@inherits LayoutComponentBase
@inject LocalizationService Localization
@inject NavigationService NavigationService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager

@if (isLoading)
{
    <div class="loading-container">
        <span>Verificando autenticación...</span>
    </div>
}
else if (!isAuthenticated && !isExternalRoute)
{
    <div class="loading-container">
        <span>No autenticado. Redirigiendo...</span>
    </div>
}
else
{
    <div class="internal-layout">
        <div class="sidebar-overlay"></div>
        <div class="sidebar-container">
            @*    <WaHubSidebar /> *@
        </div>
        <div class="main-content">
            <div class="language-switcher-container">
                <div class="language-switcher">
                    <select @onchange="OnLanguageChanged" value="@Localization.CurrentLanguage" class="language-select">
                        <option value="es">🇪🇸 Español</option>
                        <option value="en">🇺🇸 English</option>
                    </select>
                </div>
            </div>
            <div class="content">
                @ChildContent
            </div>
        </div>
    </div>
}

<NotificationContainer />

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    private bool isAuthenticated = false;
    private bool isLoading = true;
    private bool isExternalRoute = false;
    private bool hasRedirected = false;

    protected override async Task OnInitializedAsync()
    {
        var path = NavigationService.GetCurrentPath();
        isExternalRoute = NavigationService.IsExternalRoute(path);
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated == true;
        isLoading = false;
        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && !isLoading && !isAuthenticated && !isExternalRoute && !hasRedirected)
        {
            hasRedirected = true;
            NavigationManager.NavigateTo("/login", true);
        }
    }

    private async Task OnLanguageChanged(ChangeEventArgs e)
    {
        var selectedLanguage = e.Value?.ToString() ?? "es";
        await Localization.SetLanguageAsync(selectedLanguage);
        StateHasChanged();
    }
}
