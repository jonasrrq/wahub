@page "/instances"
@rendermode InteractiveServer
@inject LocalizationService Localization
@inject ApiService ApiService
@inject IJSRuntime JSRuntime
@inject NotificationService NotificationService
@attribute [Authorize]

<PageTitle>@Localization.YourInstances - WaHub</PageTitle>

<div class="instances-container">
    <div class="instances-header">
        <h1>@Localization.YourInstances</h1>
        <button class="btn-primary" @onclick="CreateNewInstance" disabled="@isLoading">
            ‚ûï Nueva Instancia
        </button>
    </div>

    @if (isLoading)
    {
        <div class="loading-state">
            <div class="spinner"></div>
            <p>Cargando instancias...</p>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="error-state">
            <p>‚ö†Ô∏è @errorMessage</p>
            <button class="btn-secondary" @onclick="LoadInstancesAsync">Reintentar</button>
        </div>
    }
    else
    {
        <div class="instances-grid">
            @foreach (var instance in instances)
            {
                <div class="instance-card @(instance.IsActive ? "active" : "inactive")">
                    <div class="instance-header">
                        <div class="instance-status">
                            <span class="status-indicator @(instance.IsActive ? "online" : "offline")"></span>
                            <span class="status-text">@instance.Status</span>
                        </div>
                        <div class="instance-actions">
                            <button class="btn-icon" @onclick="() => ToggleInstance(instance)" title="@(instance.IsActive ? "Pausar" : "Activar")">
                                @(instance.IsActive ? "‚è∏Ô∏è" : "‚ñ∂Ô∏è")
                            </button>
                            <button class="btn-icon" @onclick="() => ShowQrCode(instance)" title="Mostrar QR">
                                üì±
                            </button>
                            <button class="btn-icon" @onclick="() => DeleteInstance(instance)" title="Eliminar">
                                üóëÔ∏è
                            </button>
                        </div>
                    </div>
                    
                    <div class="instance-info">
                        <h3>@instance.Name</h3>
                        <p class="instance-number">@instance.PhoneNumber</p>
                    </div>
                    
                    <div class="instance-stats">
                        <div class="stat">
                            <span class="stat-value">@instance.MessagesSent</span>
                            <span class="stat-label">Mensajes</span>
                        </div>
                        <div class="stat">
                            <span class="stat-value">@instance.Contacts</span>
                            <span class="stat-label">Contactos</span>
                        </div>
                    </div>
                    
                    <div class="instance-footer">
                        <small>Creado: @instance.CreatedAt.ToString("dd/MM/yyyy")</small>
                        <small>√öltimo: @instance.LastActivity.ToString("HH:mm")</small>
                        <button class="btn-secondary" @onclick="() => ManageInstance(instance)">
                            Administrar
                        </button>
                    </div>
                </div>
            }
            
            @if (!instances.Any())
            {
                <div class="empty-state">
                    <div class="empty-icon">üì±</div>
                    <h2>No tienes instancias</h2>
                    <p>Crea tu primera instancia de WhatsApp para comenzar a enviar mensajes</p>
                    <button class="btn-primary" @onclick="CreateNewInstance">
                        Crear Primera Instancia
                    </button>
                </div>
            }
        </div>
    }
</div>

@* Modal para crear nueva instancia *@
@if (showCreateModal)
{
    <div class="modal-overlay" @onclick="CloseCreateModal">
        <div class="modal-content" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>Nueva Instancia de WhatsApp</h3>
                <button class="btn-close" @onclick="CloseCreateModal">‚úñÔ∏è</button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label>Nombre de la instancia:</label>
                    <input type="text" @bind="createInstanceName" placeholder="Ej: Ventas Principal" class="form-input" />
                </div>
                <div class="form-group">
                    <label>N√∫mero de tel√©fono:</label>
                    <input type="tel" @bind="createInstancePhone" placeholder="Ej: +34 666 123 456" class="form-input" />
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn-secondary" @onclick="CloseCreateModal">Cancelar</button>
                <button class="btn-primary" @onclick="ConfirmCreateInstance" disabled="@(string.IsNullOrWhiteSpace(createInstanceName) || string.IsNullOrWhiteSpace(createInstancePhone))">
                    Crear Instancia
                </button>
            </div>
        </div>
    </div>
}

@* Modal para mostrar c√≥digo QR *@
@if (showQrModal)
{
    <div class="modal-overlay" @onclick="CloseQrModal">
        <div class="modal-content qr-modal" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>C√≥digo QR para WhatsApp</h3>
                <button class="btn-close" @onclick="CloseQrModal">‚úñÔ∏è</button>
            </div>
            <div class="modal-body">
                <div class="qr-container">
                    @if (!string.IsNullOrEmpty(qrCodeImage))
                    {
                        <img src="@qrCodeImage" alt="C√≥digo QR de WhatsApp" class="qr-image" />
                    }
                    <p>Escanea este c√≥digo QR con tu aplicaci√≥n de WhatsApp para conectar esta instancia.</p>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn-primary" @onclick="CloseQrModal">Cerrar</button>
            </div>
        </div>
    </div>
}

@code {
    private List<WhatsAppInstanceDto> instances = new();
    private bool isLoading = true;
    private string? errorMessage;
    private bool showCreateModal = false;
    private bool showQrModal = false;
    private string createInstanceName = "";
    private string createInstancePhone = "";
    private string? qrCodeImage;

    protected override async Task OnInitializedAsync()
    {
        await LoadInstancesAsync();
    }

    private async Task LoadInstancesAsync()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            var result = await ApiService.GetInstancesAsync();
            instances = result ?? new List<WhatsAppInstanceDto>();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar instancias: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void CreateNewInstance()
    {
        showCreateModal = true;
        createInstanceName = "";
        createInstancePhone = "";
        StateHasChanged();
    }    private async Task ConfirmCreateInstance()
    {
        if (string.IsNullOrWhiteSpace(createInstanceName) || string.IsNullOrWhiteSpace(createInstancePhone))
        {
            NotificationService.ShowWarning("Por favor completa todos los campos");
            return;
        }

        try
        {
            var request = new CreateInstanceRequest
            {
                Name = createInstanceName,
                PhoneNumber = createInstancePhone
            };

            var success = await ApiService.CreateInstanceAsync(request);
            if (success)
            {
                showCreateModal = false;
                await LoadInstancesAsync();
                NotificationService.ShowSuccess($"Instancia '{createInstanceName}' creada exitosamente");
            }
            else
            {
                NotificationService.ShowError("Error al crear la instancia. Int√©ntalo de nuevo.");
            }
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Error inesperado: {ex.Message}");
        }
    }

    private void CloseCreateModal()
    {
        showCreateModal = false;
        StateHasChanged();
    }    private async Task ToggleInstance(WhatsAppInstanceDto instance)
    {        try
        {
            var status = instance.Status == "Conectado" ? "pausada" : "activada";
            var success = await ApiService.ToggleInstanceAsync(instance.Id);
            if (success)
            {
                await LoadInstancesAsync();
                NotificationService.ShowSuccess($"Instancia '{instance.Name}' {status} correctamente");
            }
            else
            {
                NotificationService.ShowError("Error al cambiar el estado de la instancia");
            }
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Error inesperado: {ex.Message}");
        }
    }    private async Task DeleteInstance(WhatsAppInstanceDto instance)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"¬øEst√°s seguro de que quieres eliminar la instancia '{instance.Name}'?");
        if (!confirmed) return;

        try
        {
            var success = await ApiService.DeleteInstanceAsync(instance.Id);
            if (success)
            {
                await LoadInstancesAsync();
                NotificationService.ShowSuccess($"Instancia '{instance.Name}' eliminada exitosamente");
            }
            else
            {
                NotificationService.ShowError("Error al eliminar la instancia");
            }
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Error inesperado: {ex.Message}");
        }
    }    private async Task ShowQrCode(WhatsAppInstanceDto instance)
    {
        try
        {
            var qrResponse = await ApiService.GetQrCodeAsync(instance.Id);
            if (qrResponse != null)
            {
                qrCodeImage = qrResponse.QrCode;
                showQrModal = true;
                StateHasChanged();
                NotificationService.ShowInfo("Escanea el c√≥digo QR con WhatsApp para conectar la instancia");
            }
            else
            {
                NotificationService.ShowError("No se pudo obtener el c√≥digo QR");
            }
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Error al obtener c√≥digo QR: {ex.Message}");
        }
    }

    private void CloseQrModal()
    {
        showQrModal = false;
        qrCodeImage = null;
        StateHasChanged();
    }    private void ManageInstance(WhatsAppInstanceDto instance)
    {
        // TODO: Navegar a p√°gina de administraci√≥n de instancia
        NotificationService.ShowInfo($"Funcionalidad de administraci√≥n para '{instance.Name}' pr√≥ximamente disponible");
    }
}
